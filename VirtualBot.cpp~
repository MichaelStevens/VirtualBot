#include "VirtualBot.h"

#include <QtGui/QLabel>
#include <QtGui/QMenu>
#include <QtGui/QMenuBar>
#include <QtGui/QAction>
#include <QtGui/QHBoxLayout>
#include <QKeyEvent>
#include "math.h"
#include <iostream>



VirtualBot::VirtualBot()
{
  robot = new Robot();
  last_x = robot->x;
  map = new Map();  
  particleFilter = new ParticleFilter(map->size, 50000, map);
  particleFilter->setNoise(robot->move_noise, robot->sense_noise);
  viewer = new BotViewer(robot, map);
  partViewer = new ParticleFilterViewer(particleFilter, map);  
  
  QHBoxLayout *hbox = new QHBoxLayout(this);  

  hbox->addWidget(viewer);
  hbox->addWidget(partViewer);
  
  updater = new QTimer(this);
  connect(updater, SIGNAL(timeout()), this, SLOT(updateFilter()));
  
  updater->start(100); 
  
  
  
  
  
  
  
}


void VirtualBot::updateFilter()
{
  double dist = 0;
  for(uint i=0; i<map->parts.size(); i++) {
      if(robot->x >= map->parts[i].x0 && robot->x <= map->parts[i].x1) {
	  dist = map->offset - map->parts[i].y;	  
	  break;
      }
  }
  particleFilter->move(last_x - robot->x + randn_notrig(0, robot->move_noise));
  last_x = robot->x;
  
  particleFilter->sense(dist + randn_notrig(0, robot->sense_noise));
  if(particleFilter->ESS() < particleFilter->pnum * 0.045)  particleFilter->resample();
  //particleFilter->resample();
  std::cout << particleFilter->ESS() << std::endl;
  partViewer->repaint();  
  
}

void VirtualBot::keyPressEvent(QKeyEvent* key)
{
  switch(key->key()) {
    case Qt::Key_Up:
      robot->x -= 1;
      break;
    case Qt::Key_Down:
      robot->x += 1;  
      break;
    defualt:
      
      break;   
  }
  viewer->repaint();
  
  
}


VirtualBot::~VirtualBot()
{}

#include "VirtualBot.moc"
